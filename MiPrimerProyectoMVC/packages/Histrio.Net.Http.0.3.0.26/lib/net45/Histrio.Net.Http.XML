<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Histrio.Net.Http</name>
    </assembly>
    <members>
        <member name="T:Histrio.Net.Http.AppBuilderExtensions">
            <summary>
                Appbuilder extensions
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.AppBuilderExtensions.UseTheater(Owin.IAppBuilder,Histrio.Net.Http.TheaterSettings)">
            <summary>
                Uses the histrio.
            </summary>
            <param name="appBuilder">The application builder.</param>
            <param name="theaterSettings">The histrio settings.</param>
            <returns></returns>
        </member>
        <member name="T:Histrio.Net.Http.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.Logging.ILog.Log(Histrio.Net.Http.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:Histrio.Net.Http.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Histrio.Net.Http.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Histrio.Net.Http.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Histrio.Net.Http.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Histrio.Net.Http.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="F:Histrio.Net.Http.Logging.LogProvider.DisableLoggingEnvironmentVariable">
            <summary>
            The disable logging environment variable. If the environment variable is set to 'true', then logging
            will be disabled.
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.SetCurrentLogProvider(Histrio.Net.Http.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Histrio.Net.Http.Logging.ILog"/></returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Histrio.Net.Http.Logging.ILog"/></returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:Histrio.Net.Http.Logging.ILog"/></returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Histrio.Net.Http.Logging.ILog"/></returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="P:Histrio.Net.Http.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Histrio.Net.Http.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Histrio.Net.Http.Logging.LogProvider.SetCurrentLogProvider(Histrio.Net.Http.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="P:Histrio.Net.Http.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Histrio.Net.Http.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curlybraces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Histrio.Net.Http.Dispatcher.SingleHttpControllerTypeResolver`1">
            <summary>
                Returns a single type of controller based on the type argument
                More efficient then the default that is convention based... and scans the assembly for controllers
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
        </member>
        <member name="M:Histrio.Net.Http.Dispatcher.SingleHttpControllerTypeResolver`1.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
                Gets the controller types.
            </summary>
            <param name="_">The _.</param>
            <returns></returns>
        </member>
        <member name="T:Histrio.Net.Http.Dispatcher.TheaterControllerActivator">
            <summary>
                We only have 1 controller, namely the this one. Just create an instance
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.Dispatcher.TheaterControllerActivator.#ctor(Histrio.Theater)">
            <summary>
                Initializes a new instance of the <see cref="T:Histrio.Net.Http.Dispatcher.TheaterControllerActivator"/> class.
            </summary>
            <param name="theater">The theater.</param>
        </member>
        <member name="M:Histrio.Net.Http.Dispatcher.TheaterControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
            <summary>
                Creates the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="controllerDescriptor">The controller descriptor.</param>
            <param name="controllerType">Type of the controller.</param>
            <returns></returns>
        </member>
        <member name="T:Histrio.Net.Http.TheaterMiddleware">
            <summary>
                OWIN middleware that exposes a Theater via HTTP
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.TheaterMiddleware.#ctor(Histrio.Net.Http.TheaterSettings)">
            <summary>
                Initializes a new instance of the <see cref="T:Histrio.Net.Http.TheaterMiddleware"/> class.
            </summary>
            <param name="theaterSettings">The histrio settings used to configure the middelware</param>
        </member>
        <member name="P:Histrio.Net.Http.TheaterMiddleware.MidFunc">
            <summary>
                Gets the function representing the middleware
            </summary>
            <value>
                The function representing the middleware
            </value>
        </member>
        <member name="T:Histrio.Net.Http.HttpDispatcher">
            <summary>
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.HttpDispatcher.#ctor(System.Net.Http.HttpMessageHandler,System.Uri)">
            <summary>
                Initializes a new instance of the <see cref="T:Histrio.Net.Http.HttpDispatcher"/> class.
            </summary>
            <param name="httpMessageHandler"></param>
            <param name="baseAddress"></param>
        </member>
        <member name="M:Histrio.Net.Http.HttpDispatcher.CanDispatchTo(System.Uri)">
            <summary>
                Determines whether this instance [can dispatch to] the specified actor location.
            </summary>
            <param name="actorLocation">The actor location.</param>
            <returns></returns>
        </member>
        <member name="M:Histrio.Net.Http.HttpDispatcher.Dispatch``1(Histrio.Message{``0},System.Uri)">
            <summary>
                Dispatches the specified message.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="actorLocation">The actor location.</param>
        </member>
        <member name="T:Histrio.Net.Http.TheaterSettings">
            <summary>
                Settings for hosting theater middleware
            </summary>
        </member>
        <member name="P:Histrio.Net.Http.TheaterSettings.Theater">
            <summary>
                Gets or sets the theater.
            </summary>
            <value>
                The theater.
            </value>
        </member>
        <member name="P:Histrio.Net.Http.TheaterSettings.EndpointAddress">
            <summary>
            Gets or sets the endpoint address.
            </summary>
            <value>
            The endpoint address.
            </value>
        </member>
        <member name="T:Histrio.Net.Http.TheaterExtensions">
            <summary>
                Extensio method for the <see cref="T:Histrio.Theater"/> class
            </summary>
        </member>
        <member name="M:Histrio.Net.Http.TheaterExtensions.PermitMessageDispatchOverHttp(Histrio.Theater,System.Net.Http.HttpMessageHandler,System.Uri)">
            <summary>
                Permits the dispatch of messages over HTTP.
            </summary>
            <param name="theater">The theater.</param>
            <param name="httpMessageHandler"></param>
            <param name="baseAddress"></param>
        </member>
        <member name="M:Histrio.Net.Http.TheaterExtensions.PermitMessageDispatchOverHttp(Histrio.Theater,System.Uri)">
            <summary>
                Permits dispatch over HTTP using th default HttpClientHandler
            </summary>
            <param name="theater"></param>
            <param name="baseAddress"></param>
        </member>
        <member name="M:Histrio.Net.Http.TheaterExtensions.AddHttpEndPoint(Histrio.Theater,System.Uri,Owin.IAppBuilder)">
            <summary>
            Adds the HTTP end point.
            </summary>
            <param name="theater">The theater.</param>
            <param name="endpointAddress">The endpoint address.</param>
            <param name="appBuilder">The application builder.</param>
        </member>
    </members>
</doc>
